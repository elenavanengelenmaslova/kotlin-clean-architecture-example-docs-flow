name: Standard CI/CD workflow for Azure Functions

on:
  workflow_call:
    inputs:
      azure_region:
        required: false
        type: string
        default: "West Europe"
      azure_resource_group:
        required: false
        type: string
        default: "CleanArchitectureRG-WEU"
    secrets:
      azure_subscription_id:
        required: true
      azure_oidc_client_id:
        required: true
      azure_tenant_id:
        required: true
      AZURE_STORAGE_ACCOUNT_NAME:
        required: true
      AZURE_STORAGE_ACCOUNT_ACCESS_KEY:
        required: true

env:
  DEPLOY_TARGET_REGION: ${{ inputs.azure_region }}
  AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
  TF_VAR_AZURE_STORAGE_ACCOUNT_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_ACCESS_KEY }}
  AZURE_OIDC_CLIENT_ID: ${{ secrets.azure_oidc_client_id }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
  AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
  BUILD_NO: ${{ github.run_number }}
  AZURE_RESOURCE_GROUP_NAME: ${{ inputs.azure_resource_group }}

jobs:
  deploy-infra:
    name: Kotlin Spring Cloud Function - Azure deployment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - {
            component-name: "Docs Flow Spring Clean Architecture Azure Functions",
            stack-name: "Docs-Flow-Azure-Clean-Architecture"
          }

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.azure_oidc_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}


      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.10.5

      - name: Deploy infrastructure with Terraform
        run: |
          cd ${GITHUB_WORKSPACE}/cdk/azure/cdktf.out/stacks/${{ matrix.config.stack-name }}
          terraform init -reconfigure \
            -backend-config="resource_group_name=${AZURE_RESOURCE_GROUP_NAME}" \
            -backend-config="storage_account_name=${AZURE_STORAGE_ACCOUNT_NAME}" \
            -backend-config="client_id=${azure_oidc_client_id}" \
            -backend-config="subscription_id=${AZURE_SUBSCRIPTION_ID}" \
            -backend-config="tenant_id=${AZURE_TENANT_ID}"
          terraform plan \
            -var="AZURE_CLIENT_ID=${azure_oidc_client_id}" \
            -var="AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}" \
            -var="AZURE_TENANT_ID=${AZURE_TENANT_ID}" \
            -var="AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME}" \
            -var="AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME}" \
            -out=tfplan
          terraform apply -auto-approve tfplan


  deploy-app:
    runs-on: ubuntu-latest
    needs: [ deploy-infra ]
    name: Azure Functions deployment

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Login to Azure with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.azure_oidc_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Azure Functions Core Tools v4
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true
      

      - name: Deploy with gradle
        run: |
          cd ${GITHUB_WORKSPACE}
          ./gradlew clean azureFunctionsDeploy
