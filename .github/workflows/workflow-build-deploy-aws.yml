name: Standard CI/CD workflow for AWS Lambda

on:
  workflow_call:
    inputs:
      aws_region:
        required: false
        type: string
        default: "eu-west-1"
    secrets:
      aws_account_id:
        required: true
      role_name:
        required: true

env:
  # Supply target AWS account here
  TF_VAR_DEPLOY_TARGET_ACCOUNT: ${{ secrets.aws_account_id }}
  DEPLOY_TARGET_REGION: ${{ inputs.aws_region }}
  BUILD_NO: ${{ github.run_number }}

jobs:
  build:
    name: Build and package software
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "adopt"
          cache: gradle
      - name: Build with Gradle
        run:
          ./gradlew clean :infra-aws:build :infra-aws:shadowJar --no-build-cache
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: LambdaArtifacts
          # A file, directory or wildcard pattern that describes what to upload
          path: build/dist/*.jar
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Duration after which artifact will expire in days. 0 means using default retention.
          retention-days: 1

  deploy-app:
    runs-on: ubuntu-latest
    needs: [ build ]
    strategy:
      matrix:
        config:
          [
            {
              component-name: "Docs Flow Spring Clean Architecture AWS Lambda",
              stack-name: "Docs-Flow-Spring-Clean-Architecture-Lambda",
            }
          ]
    name: ${{ matrix.config.component-name }} deployment

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: LambdaArtifacts
          path: build/dist/

      - name: Hash JAR file before upload
        run: sha256sum build/dist/docs-flow-aws-function.jar

      - name: Debug role-to-assume value
        run: |
          echo "Resolved role-to-assume ARN:"
          echo "arn:aws:iam::${{ secrets.aws_account_id }}:role/${{ secrets.role_name }}"

      - name: Configure aws credentials for CDK deployment
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::021259937026:role/GitHubOIDCAdmin
          aws-region: ${{ inputs.aws_region }}

      - name: Upload Lambda JAR to S3
        run: aws s3 cp build/dist/docs-flow-aws-function.jar s3://lambda-deployment-clean-architecture-example/docs-flow-aws-function.jar --region ${{ inputs.aws_region }}

      - uses: actions/setup-node@v4
        with:
          node-version: "22"


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.10.5

      - name: Initialize Terraform and Read Remote State
        run: |
          cd ${GITHUB_WORKSPACE}/cdk/aws/cdktf.out/stacks/${{ matrix.config.stack-name }}
          terraform init -reconfigure -backend-config="region=${DEPLOY_TARGET_REGION}"
          terraform plan -var="DEPLOY_TARGET_REGION=${DEPLOY_TARGET_REGION}" -out=tfplan

      - name: Apply Only Relevant Changes
        run: |
          cd ${GITHUB_WORKSPACE}/cdk/aws/cdktf.out/stacks/${{ matrix.config.stack-name }}
          terraform apply -auto-approve tfplan
